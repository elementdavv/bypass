text := import("text")
brook := import("brook")
json := import("json")

dnsquery_handler := func(m){
    if m.domain == "example.com"{
        return {"block": true}
    }
    if m.domain == "example1.com"{
        return {"bypass": true}
    }
    if m.domain == "example2.com" {
        if m.type == "A" {
            return {ip: "10.211.1.76"}
        }
        if m.type == "AAAA" {
            return {"block": true}
        }
    }
}

address_handler := func(m) {
    if m.ipaddress {
        r := brook.splithostport(m.ipaddress)
        if is_error(r) {
            return r
        }
        if r.host == "1.2.4.8" {
            return { "block": true }
        }
        s := brook.country(r.host)
        if s == "ZZ" || s == "CN" {
            return { "bypass": true }
        }
        return
    }
    if m.network == "tcp" && m.domainaddress {
        if m.domainaddress == "httpbin.org:80" {
            return {"mitm": true, "mitmprotocol": "http"}
        }
        if m.domainaddress == "httpbin.org:443" {
            return {"mitm": true, "mitmprotocol": "https", "mitmwithbody": true}
        }
        if m.domainaddress == "example3.com:80" {
            return {"bypass": true, "ipaddress": "10.211.1.76:8080", "mitm": true, "mitmprotocol": "http", "mitmwithbody": true}
        }
        if m.domainaddress == "myip.ipip.net:443" {
            return {"bypass": true, "ipaddressfrombypassdns": "A", "mitm": true, "mitmprotocol": "https", "mitmwithbody": true}
        }
        return
    }
    if m.network == "udp" && m.domainaddress {
        if text.has_suffix(m.domainaddress, "httpbin.org:443") {
            return { "block": true }
        }
        return
    }
}

httprequest_handler := func(request){
    if text.has_prefix(request["URL"], "http://httpbin.org") {
        response := {
            "StatusCode": 301,
            "Location": text.replace(request["URL"], "http://", "https://", 1)
        }
        return response
    }
    if text.has_prefix(request["URL"], "https://httpbin.org") {
        request["User-Agent"] = "curl/7.79.1"
        return request
    }
    return request
}

httpresponse_handler := func(request, response){
    delete(response, "Alt-Svc") // Avoid upgrading to http3
    if text.has_prefix(request["URL"], "https://httpbin.org") && response["Content-Type"] == "application/json" {
        j := json.decode(response["Body"])
        j.origin = "M.A.R.S"
        response["Body"] = json.encode(j)
        return response
    }
    if text.has_prefix(request["URL"], "https://myip.ipip.net") {
        response["Body"] = bytes(text.re_replace(`\d+\.\d+\.\d+\.\d+`, string(response["Body"]), "1.2.3.4")) // todo check error
        return response
    }
    return response
}

handler := func(){
    if in_dnsquery {
        return dnsquery_handler(in_dnsquery)
    }
    if in_address {
        return address_handler(in_address)
    }
    if in_httprequest && !in_httpresponse {
        return httprequest_handler(in_httprequest)
    }
    if in_httprequest && in_httpresponse {
        return httpresponse_handler(in_httprequest, in_httpresponse)
    }
}

out := handler()
